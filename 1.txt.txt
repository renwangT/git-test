1.ttttt
2.ttttt
3.rrrrr
4.ffff


.location-img {
    position: absolute;
    width: 58px;
    height: auto;
    left: 180px;
    bottom: 200px;
    transform-origin: center bottom;
    animation: bounce 1s infinite both;
  }
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transition-timing-function: cubic-bezier(.215,.61,.355,1);
      transform: translateZ(0);
    }
    40%, 43% {
      transition-timing-function: cubic-bezier(.755,.05,.855,.06);
        transform: translate3d(0,-30px,0);
    }
    70% {
      transition-timing-function: cubic-bezier(.755,.05,.855,.06);
      transform: translate3d(0,-15px,0);
    }
    90% {
      transform: translate3d(0,-4px,0);
    }
  }




import React, { useMemo, useEffect } from 'react';
import { Form, Tooltip, Divider, Row, Col } from 'antd';

const filterLayout = {
  labelCol: { span: 7, offset: 1 },
  wrapperCol: { span: 16 },
};

const Filter = React.forwardRef((props: any, ref: any) => {
  const [form] = Form.useForm();
  const {
    filterItem,
    layout = filterLayout,
    initialValues = {},
    children,
    expandable = false,
    style = {},
    size = 'small',
  } = props;
  const onFinish = async (values: any) => {
    console.log("onFinish's values", values);
    props.search(values);
  };
  useEffect(() => {
    if (ref) {
      ref.current = {
        form,
      };
    }
  }, []);
  // 优化组件 依赖父组件的 prop filterItem
  return useMemo(() => {
    console.log(
      '%c------------------------------Filter render-----------------------------',
      'color: blue;',
    );
    return (
      <Form
        size={size}
        form={form}
        layout="horizontal"
        scrollToFirstError={true}
        onFinish={onFinish}
        initialValues={initialValues}
        style={style}
      >
        <Row>
          {filterItem.map((item: any, k: number) => {
            if (item.type && item.type === 'expandable') {
              return (
                <Col
                  span={24}
                  key={item.type}
                  style={{
                    minHeight: 0,
                    height: expandable ? '36px' : 0,
                    // transition: 'height .2s',
                    overflow: 'hidden',
                  }}
                >
                  <Row>
                    {item.children.map((v: any) => {
                      const {
                        input: InputCom,
                        span = 3,
                        colon = false,
                        ...extra
                      } = v;
                      return (
                        <Col key={v.name} span={span}>
                          <Form.Item
                            {...layout}
                            labelAlign="rigth"
                            colon={colon}
                            {...extra}
                            style={{ marginBottom: '10px' }}
                          >
                            <InputCom />
                          </Form.Item>
                        </Col>
                      );
                    })}
                  </Row>
                </Col>
              );
            } else {
              const {
                input: InputCom,
                span = 3,
                colon = false,
                ...extra
              } = item;
              return (
                <Col key={k} span={span}>
                  <Form.Item
                    {...layout}
                    labelAlign="rigth"
                    colon={colon}
                    {...extra}
                    style={{ marginBottom: '10px' }}
                  >
                    <InputCom />
                  </Form.Item>
                </Col>
              );
            }
          })}
        </Row>
        {children}
      </Form>
    );
  }, [filterItem, props.search, expandable, children]);
});
export default Filter;
